import java.io.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Objects;
import javax.swing.*;
import javax.swing.tree.*;    
class Explorer extends JPanel implements ActionListener
        {	
	JTextField jtf;
        JTextArea jta;
        JTree tree;
        JButton refresh;
        JTable jtb;
        JScrollPane jsp;
        JScrollPane jspTable;
        final String[] colHeads={"File Name","SIZE(in Bytes)","Read Only","Hidden"};
        String[][]data={{"","","","",""}};    
        Explorer(String path)
        {
            jtf=new JTextField();
            jta=new JTextArea(5,30);
            refresh=new JButton("Refresh");
            File temp=new File(path);
            DefaultMutableTreeNode top=createTree(temp);
//if(top!=null)
            tree=new JTree(top);
            jsp=new JScrollPane(tree);
            final String[] colHeads={"File Name","SIZE(in Bytes)","Read Only","Hidden"};
            String[][]data={{"","","","",""}};
            jtb=new JTable(data, colHeads);
            jspTable=new JScrollPane(jtb);
            setLayout(new BorderLayout());
            add(jtf,BorderLayout.NORTH);
            add(jsp,BorderLayout.WEST);
            add(jspTable,BorderLayout.CENTER);
            add(refresh,BorderLayout.SOUTH);
            tree.addMouseListener(
                    new MouseAdapter()
                    {
                        public void mouseClicked(MouseEvent me)
                        {
                            doMouseClicked(me);
                        }
                    });
            jtf.addActionListener(this);
            refresh.addActionListener(this);
        }
        public void actionPerformed(ActionEvent ev)
        {
            File temp=new File(jtf.getText());
            DefaultMutableTreeNode newtop=createTree(temp);
            if(newtop!=null)
                tree=new JTree(newtop);
            remove(jsp);
            jsp=new JScrollPane(tree);
            setVisible(false);
            add(jsp,BorderLayout.WEST);
            tree.addMouseListener(
                    new MouseAdapter()
                    {
                        public void mouseClicked(MouseEvent me)
                        {
                            doMouseClicked(me);
                        }
                    });

            setVisible(true);
        }
        DefaultMutableTreeNode createTree(File temp)
        {
            DefaultMutableTreeNode top=new DefaultMutableTreeNode(temp.getPath());
            if(!(temp.exists() && temp.isDirectory()))
                return top;

            fillTree(top,temp.getPath());

            return top;
        }
        void fillTree(DefaultMutableTreeNode root, String filename)
        {
            File temp=new File(filename);

            if(!(temp.exists() && temp.isDirectory()))
                return;
//System.out.println(filename);
            File[] filelist=temp.listFiles();

            for(int i = 0; i< Objects.requireNonNull(filelist).length; i++)
            {
                if(!filelist[i].isDirectory())
                    continue;
                final DefaultMutableTreeNode tempDmtn=new DefaultMutableTreeNode(filelist[i].getName());
                root.add(tempDmtn);
                final String newfilename= filename + "\\" + filelist[i].getName();
                //run
                Thread t= new Thread(() -> fillTree(tempDmtn,newfilename));//thread
                t.start();
            }//for
        }//function
        void doMouseClicked(MouseEvent me)
        {
            TreePath tp=tree.getPathForLocation(me.getX(),me.getY());
            if(tp==null) return;
//jtf.setText(tp.toString());
            String s=tp.toString();
            s=s.replace("[","");
            s=s.replace("]","");
            s=s.replace(", ","\\");
//s=s.replace(" ","");
//int z=s.lastIndexOf("\"\\\"");
//s="\'"+s; s=s+"\'";
            jtf.setText(s);
            showFiles(s);
//java.util.StringTokenizer st=new java.util.StringTokenizer(s,",");
//jtf.setText(jtf.getText()+"="+s);

        }
        void showFiles(String filename)
        {
            File temp=new File(filename);
            data=new String[][]{{"","","",""}};
            remove(jspTable);
            jtb=new JTable(data, colHeads);
            jspTable=new JScrollPane(jtb);
            setVisible(false);
            add(jspTable,BorderLayout.CENTER);
            setVisible(true);

            if(!temp.exists()) return;
            if(!temp.isDirectory()) return;

//System.out.println(filename);
            File[] filelist=temp.listFiles();
            int fileCounter=0;
            assert filelist != null;
            data=new String[filelist.length][4];
            for (File file : filelist) {
                if (file.isDirectory())
                    continue;
                data[fileCounter][0] = file.getName();
                data[fileCounter][1] = file.length() + "";
                data[fileCounter][2] = !file.canWrite() + "";
                data[fileCounter][3] = file.isHidden() + "";
                fileCounter++;
            }//for

            String[][] dataTemp =new String[fileCounter][4];
            if (fileCounter >= 0) System.arraycopy(data, 0, dataTemp, 0, fileCounter);
            data=dataTemp;

//System.out.println(data);
            remove(jspTable);
            jtb=new JTable(data, colHeads);
            jspTable=new JScrollPane(jtb);
            setVisible(false);
            add(jspTable,BorderLayout.CENTER);
            setVisible(true);
        }
    }
    class ExplorerTest extends JFrame
    {

        ExplorerTest(String path)
        {
            super("Windows Explorer");
            add(new Explorer(path),"Center");
            setDefaultCloseOperation(EXIT_ON_CLOSE);
            setSize(400,400);
            setVisible(true);
        }

        public static void main(String[] args)
        {
            new ExplorerTest(".");
        }
    }